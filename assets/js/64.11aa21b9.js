(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{677:function(a,s,e){a.exports=e.p+"assets/img/image-20210128185758372.87a9b1e3.png"},678:function(a,s,e){a.exports=e.p+"assets/img/image-20210128193827100.4a09a773.png"},801:function(a,s,e){"use strict";e.r(s);var t=e(13),v=Object(t.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"jvm-内存结构-基于-jdk-1-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm-内存结构-基于-jdk-1-8"}},[a._v("#")]),a._v(" JVM 内存结构：基于 JDK 1.8")]),a._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://docs.oracle.com/javase/specs/index.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java SE 规范所有版本官方地址"),t("OutboundLink")],1),a._v("，包括语言规范和虚拟机规范")])]),a._v(" "),t("h2",{attrs:{id:"运行时数据区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行时数据区"}},[a._v("#")]),a._v(" 运行时数据区")]),a._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5",target:"_blank",rel:"noopener noreferrer"}},[a._v("JDK 8 官方运行时数据区文档"),t("OutboundLink")],1)])]),a._v(" "),t("p",[t("img",{attrs:{src:e(677),alt:"image-20210128185758372"}})]),a._v(" "),t("p",[a._v("Java 虚拟机定义了在程序执行期间使用的各种运行时数据区域。其中一些数据区域是在 Java 虚拟机启动时创建的，仅在 Java 虚拟机退出时才被销毁。其他数据区域是每个线程的。在创建线程时创建每个线程的数据区域，在线程退出时销毁每个数据区域。")]),a._v(" "),t("h3",{attrs:{id:"程序计数器-pc-register"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器-pc-register"}},[a._v("#")]),a._v(" 程序计数器 /  Pc  Register")]),a._v(" "),t("p",[a._v("Java 虚拟机可以一次支持多个执行线程（JLS§17）。每个 Java 虚拟机线程都有其自己的   "),t("code",[a._v("Pc Register")]),a._v("（程序计数器）。在任何时候，每个 Java 虚拟机线程都在执行单个方法的代码，即该线程的当前方法：")]),a._v(" "),t("ul",[t("li",[a._v("如果不是 "),t("code",[a._v("native")]),a._v("，则该 "),t("code",[a._v("Pc Register")]),a._v(" 包含当前正在执行的 Java 虚拟机指令的地址。")]),a._v(" "),t("li",[a._v("如果线程当前正在执行的方法是 "),t("code",[a._v("native")]),a._v("，则 Java 虚拟机的 "),t("code",[a._v("Pc Register")]),a._v(" 值未定义。")])]),a._v(" "),t("h3",{attrs:{id:"虚拟机栈-java-virtual-machine-stacks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机栈-java-virtual-machine-stacks"}},[a._v("#")]),a._v(" 虚拟机栈 / Java Virtual Machine Stacks")]),a._v(" "),t("p",[a._v("每个 Java 虚拟机线程都有一个私有 "),t("em",[a._v("Java 虚拟机堆栈")]),a._v(" ，与该线程同时创建。Java 虚拟机堆栈类似于 C 之类的常规语言的堆栈：它保存局部变量和部分结果，并在方法调用和返回中起作用。因为除了入栈和出栈外，从不直接操纵 Java 虚拟机堆栈，所以可以为堆分配帧。Java 虚拟机堆栈的内存不必是连续的。")]),a._v(" "),t("p",[a._v("在第一版 "),t("em",[a._v("中的 Java ®虚拟机规范")]),a._v(" ，Java 虚拟机堆被称为 "),t("em",[a._v("Java堆栈")]),a._v(" 。")]),a._v(" "),t("p",[a._v("该规范允许 Java 虚拟机堆栈具有固定大小，或根据计算要求动态扩展和收缩。如果 Java 虚拟机堆栈的大小固定，则在创建每个 Java 虚拟机堆栈时可以独立选择它们的大小。")]),a._v(" "),t("p",[a._v("Java 虚拟机实现可以为程序员或用户提供对 Java 虚拟机堆栈的初始大小的控制，并且在动态扩展或收缩 Java 虚拟机堆栈的情况下，可以控制最大和最小大小。")]),a._v(" "),t("p",[a._v("以下异常条件与 Java 虚拟机堆栈相关：")]),a._v(" "),t("ul",[t("li",[a._v("如果线程中的计算所需的 Java 虚拟机堆栈超出允许的范围，则 Java 虚拟机将抛出 "),t("code",[a._v("StackOverflowError")]),a._v("。")]),a._v(" "),t("li",[a._v("如果可以动态扩展 Java 虚拟机堆栈，并尝试进行扩展，但是可以提供足够的内存来实现扩展，或者如果没有足够的内存来为新线程创建初始 Java 虚拟机堆栈，则可以使用 Java 虚拟机机器抛出一个 "),t("code",[a._v("OutOfMemoryError")]),a._v("。")])]),a._v(" "),t("h4",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),t("p",[t("strong",[a._v("Java 虚拟机栈")]),a._v(" 是线程私有的，它的生命周期与线程相同。它描述的是 Java 方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。")]),a._v(" "),t("h3",{attrs:{id:"堆-heap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆-heap"}},[a._v("#")]),a._v(" 堆 / Heap")]),a._v(" "),t("p",[a._v("Java 虚拟机具有一个在所有 Java 虚拟机线程之间共享的 "),t("strong",[a._v("堆")]),a._v(" 。堆是运行时数据区，"),t("strong",[a._v("从中分配所有类实例和数组的内存")]),a._v("。")]),a._v(" "),t("p",[a._v("堆是在虚拟机启动时创建的。对象的堆存储由自动存储管理系统（称为 "),t("em",[a._v("垃圾收集器")]),a._v(" ）"),t("em",[a._v("回收")]),a._v("；对象永远不会显式释放。Java 虚拟机不假定特定类型的自动存储管理系统，并且可以根据实现者的系统要求选择存储管理技术。堆的大小可以是固定的，也可以根据计算要求进行扩展，如果不需要更大的堆，则可以将其收缩。堆的内存不必是连续的。")]),a._v(" "),t("p",[a._v("Java 虚拟机实现可以为程序员或用户提供对堆初始大小的控制，并且，如果可以动态扩展或收缩堆，则可以控制最大和最小堆大小。")]),a._v(" "),t("p",[a._v("以下异常情况与堆相关联：")]),a._v(" "),t("ul",[t("li",[a._v("如果计算需要的堆多于自动存储管理系统可以提供的堆，则 Java 虚拟机将抛出一个  "),t("code",[a._v("OutOfMemoryError")]),a._v("。")])]),a._v(" "),t("h4",{attrs:{id:"小结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结-2"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),t("p",[a._v("Java 堆是 Java 虚拟机所管理的内存中最大的一块。堆是被所有线程共享的一块内存区域，在虚拟机启动时创建，此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。")]),a._v(" "),t("p",[a._v("Java 堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。")]),a._v(" "),t("h3",{attrs:{id:"方法区-method-area"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法区-method-area"}},[a._v("#")]),a._v(" 方法区 / Method Area")]),a._v(" "),t("p",[a._v("Java 虚拟机具有一个在所有 Java 虚拟机线程之间共享的 "),t("strong",[a._v("方法区域")]),a._v("。该方法区域类似于常规语言的编译代码的存储区域，或者类似于操作系统过程中的 「文本」段。"),t("strong",[a._v("它存储每个类的结构")]),a._v(" ，例如运行时常量池，字段和方法数据，以及方法和构造函数的代码，包括用于类和实例初始化以及接口初始化的特殊方法。")]),a._v(" "),t("p",[a._v("方法区域是在 "),t("strong",[a._v("虚拟机启动时创建的")]),a._v("。尽管方法区域在逻辑上是堆的一部分，但是简单的实现可以选择不进行垃圾回收或压缩。该规范没有规定方法区域的位置或用于管理已编译代码的策略。方法区域可以是固定大小的，或者可以根据计算的需要进行扩展，如果不需要更大的方法区域，则可以缩小。方法区域的内存不必是连续的。")]),a._v(" "),t("p",[a._v("Java 虚拟机实现可以为程序员或用户提供对方法区域初始大小的控制，并且在方法大小可变的情况下，可以控制最大和最小方法区域大小。")]),a._v(" "),t("p",[a._v("以下异常条件与方法区域相关联：")]),a._v(" "),t("ul",[t("li",[a._v("如果无法提供方法区域中的内存来满足分配请求，则 Java 虚拟机将抛出一个 "),t("code",[a._v("OutOfMemoryError")]),a._v("。")])]),a._v(" "),t("h4",{attrs:{id:"小结-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结-3"}},[a._v("#")]),a._v(" 小结")]),a._v(" "),t("p",[a._v("方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器后的代码等数据。")]),a._v(" "),t("p",[a._v("虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 "),t("code",[a._v("Non-Heap")]),a._v(" （非堆），目的是与 Java 堆区分开来。")]),a._v(" "),t("h3",{attrs:{id:"运行时常量池-run-time-constant-pool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池-run-time-constant-pool"}},[a._v("#")]),a._v(" 运行时常量池 / Run-Time Constant Pool")]),a._v(" "),t("p",[t("strong",[a._v("运行时间常量池")]),a._v(" 是方法区的一部分，Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。")]),a._v(" "),t("p",[a._v("以下异常条件与类或接口的运行时常量池的构造有关：")]),a._v(" "),t("ul",[t("li",[a._v("创建类或接口时，如果运行时常量池的构造需要的内存超过 Java 虚拟机的方法区域中可用的内存，则Java虚拟机将抛出 "),t("code",[a._v("OutOfMemoryError")]),a._v(" 。")])]),a._v(" "),t("h3",{attrs:{id:"本地方法堆栈-native-method-stacks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地方法堆栈-native-method-stacks"}},[a._v("#")]),a._v(" 本地方法堆栈 / Native Method Stacks")]),a._v(" "),t("p",[a._v("Java 虚拟机的实现可以使用传统的堆栈（俗称 「C 堆栈」）来支持 "),t("code",[a._v("native")]),a._v(" 方法（以 Java 编程语言以外的语言编写的方法）。解释程序的实现也可以使用诸如 C 之类的语言来解释 Java 虚拟机的指令集，以使用 "),t("code",[a._v("native")]),a._v("  本机方法栈。无法加载方法并且自身不依赖于常规堆栈的 Java 虚拟机实现无需提供本机方法栈。如果提供，通常在创建每个线程时为每个线程分配本机方法堆栈。")]),a._v(" "),t("p",[a._v("该规范允许本机方法堆栈具有固定大小，或者根据计算需要动态扩展和收缩。如果本机方法堆栈的大小固定，则在创建每个本机方法堆栈的大小时可以独立选择。")]),a._v(" "),t("p",[a._v("Java 虚拟机实现可以为程序员或用户提供对本机方法堆栈的初始大小的控制，并且在本机方法堆栈大小变化的情况下，可以控制最大和最小方法堆栈大小。")]),a._v(" "),t("p",[a._v("以下异常条件与本机方法堆栈相关联：")]),a._v(" "),t("ul",[t("li",[a._v("如果线程中的计算所需的本机方法堆栈超出允许的范围，则 Java 虚拟机将抛出  "),t("code",[a._v("StackOverflowError")]),a._v("。")]),a._v(" "),t("li",[a._v("如果可以动态扩展本机方法堆栈并尝试进行本机方法堆栈扩展，但可以提供足够的内存，或者可以提供足够的内存来为新线程创建初始本机方法堆栈，则 Java 虚拟机将抛出 "),t("code",[a._v("OutOfMemoryError")]),a._v("。")])]),a._v(" "),t("h4",{attrs:{id:"小节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小节"}},[a._v("#")]),a._v(" 小节")]),a._v(" "),t("p",[a._v("本地方法堆栈与虚拟机栈所发挥的作用是非常相似，他们之间的区别不过是虚拟机栈为虚拟机执行 Java 方法（字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。")]),a._v(" "),t("h2",{attrs:{id:"jvm-的内存结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm-的内存结构"}},[a._v("#")]),a._v(" JVM 的内存结构")]),a._v(" "),t("p",[t("img",{attrs:{src:e(678),alt:"image-20210128193827100"}})]),a._v(" "),t("h3",{attrs:{id:"非堆区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非堆区"}},[a._v("#")]),a._v(" 非堆区")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("Metaspace")]),a._v(" "),t("p",[a._v("Class、Package、Method、Field、字节码、常量池、符号引用等")])]),a._v(" "),t("li",[t("p",[a._v("CSS：32 位指针的 Class")])]),a._v(" "),t("li",[t("p",[a._v("CodeCache：JIT 编译后的本地代码、JNI 使用的 C 代码")])])]),a._v(" "),t("p",[a._v("比如说：可以在 Tomcat 的 "),t("code",[a._v("bin/catalina.sh")]),a._v(" 中配置如下参数：")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 大概在 269 行，第一次非注释出现的地方")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("JAVA_OPTS")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$JAVA_OPTS")]),a._v(' -Xms128M -Xmx128M -XX:MetaspaceSize=128M -XX:MaxMetaspaceSize=128M -XX:+UseCompressedClassPointers"')]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("重启 TOMCAT 后，查看他的 JC 信息")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("mrcode@mrcode ~ % jps -l\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("417")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("867")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2135")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30776")]),a._v(" org.apache.catalina.startup.Bootstrap\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30781")]),a._v(" sun.tools.jps.Jps\n\nmrcode@mrcode ~ % jstat -gc "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30776")]),a._v("\n S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT   \n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9728.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9216.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2861.8")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("24576.0")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("15416.1")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("87552.0")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("35399.4")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("41472.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("40137.4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5120.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4781.9")]),a._v("     "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("22")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.119")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.119")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("可以看到 CCSC 是 5120 KB，那么我们将它禁用掉")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 改成 - ：-XX:-UseCompressedClassPointers")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("JAVA_OPTS")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$JAVA_OPTS")]),a._v(' -Xms128M -Xmx128M -XX:MetaspaceSize=128M -XX:MaxMetaspaceSize=128M -XX:-UseCompressedClassPointers"')]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])]),t("p",[a._v("重启后查看")]),a._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("mrcode@mrcode ~ % jps -l\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("417")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30834")]),a._v(" sun.tools.jps.Jps\n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("867")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2135")]),a._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30825")]),a._v(" org.apache.catalina.startup.Bootstrap\n\nmrcode@mrcode ~ % jstat -gc "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30825")]),a._v("\n S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT   \n"),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8704.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9216.0")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2161.4")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("24576.0")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("9539.1")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("87552.0")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("36188.3")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("39680.0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("38174.0")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0")]),a._v("       "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("23")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.116")]),a._v("   "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v("      "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.000")]),a._v("    "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.116")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("p",[a._v("CCSC 和 CCSU 都变成 0 了")]),a._v(" "),t("h2",{attrs:{id:"常用参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用参数"}},[a._v("#")]),a._v(" 常用参数")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("-Xms -Xmx")]),a._v(" ：堆内存大小")]),a._v(" "),t("li",[t("code",[a._v("-XX:NewSize -XX:MaxNewSize")]),a._v("：新生代，young 区")]),a._v(" "),t("li",[t("code",[a._v("-XX:NewRatio")]),a._v(" ：新生代 和 old 区的一个比例")]),a._v(" "),t("li",[t("code",[a._v("-XX:MaxSurvivorRatio")]),a._v(" ：Eden 区和 Survivor 区的比例")]),a._v(" "),t("li",[t("code",[a._v("-XX:MetaspaceSize -XX:MaxMetaspaceSize")]),a._v(" ：Metaspace 大小")]),a._v(" "),t("li",[t("code",[a._v("-XX:UseCompressedClassPointers")]),a._v("：是否启用压缩的类指针")]),a._v(" "),t("li",[t("code",[a._v("-XX:CompressedClassSpaceSize")]),a._v("：设置类压缩占用空间")]),a._v(" "),t("li",[t("code",[a._v("-XX:InitialCodeCacheSize")]),a._v("：CodeCache 初始大小")]),a._v(" "),t("li",[t("code",[a._v("-XX:ReservedCodeCacheSize")]),a._v("：CodeCache 最大大小")])]),a._v(" "),t("p",[a._v("Metaspace 后面的这几个一般都不需要调整，只需要调整 MetaspaceSize 大小，因为他们都是包含在 MetaspaceSize 中的")])])}),[],!1,null,null,null);s.default=v.exports}}]);