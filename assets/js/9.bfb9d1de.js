(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{656:function(a,s,t){a.exports=t.p+"assets/img/image-20210117210523984.f22790f8.png"},657:function(a,s,t){a.exports=t.p+"assets/img/image-20210117211938381.6194c592.png"},658:function(a,s,t){a.exports=t.p+"assets/img/image-20210117215032826.a96a5f61.png"},659:function(a,s,t){a.exports=t.p+"assets/img/image-20210117215231403.fd55617f.png"},660:function(a,s,t){a.exports=t.p+"assets/img/image-20210117215523473.d6b116d8.png"},661:function(a,s,t){a.exports=t.p+"assets/img/image-20210117215848221.5074f91f.png"},662:function(a,s,t){a.exports=t.p+"assets/img/image-20210117220016498.f482f6c0.png"},663:function(a,s,t){a.exports=t.p+"assets/img/image-20210117220446231.dda0edff.png"},664:function(a,s,t){a.exports=t.p+"assets/img/image-20210117221101215.ac8b15fa.png"},665:function(a,s,t){a.exports=t.p+"assets/img/image-20210117221114887.57521261.png"},785:function(a,s,t){"use strict";t.r(s);var e=t(13),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"监控本地-java-进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#监控本地-java-进程"}},[a._v("#")]),a._v(" 监控本地 JAVA 进程")]),a._v(" "),e("p",[a._v("相当于是前面那些命令的一个集成")]),a._v(" "),e("p",[a._v("JVisualVM 是 java 自带的工具，一般在 jdk 安装目录下的 bin 目录下")]),a._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 笔者这里是 mac 系统，查找这个文件名")]),a._v("\nmrcode:chapter2 mrcode$ mdfind -name "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'jvisualvm'")]),a._v("\n/usr/bin/jvisualvm   "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 这里有一个指令，可以直接在中断中运行 jvisualvm 就打开了")]),a._v("\n/Library/Java/JavaVirtualMachines/jdk1.8.0_201.jdk/Contents/Home/bin/jvisualvm\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br")])]),e("p",[a._v("打开这个软件后的截图如下")]),a._v(" "),e("p",[e("img",{attrs:{src:t(656),alt:"image-20210117210523984"}})]),a._v(" "),e("p",[a._v("可以看到上面直接就列出来了，入门指南、故障排除指南等文档。")]),a._v(" "),e("p",[a._v("在左边「本地」，会直接列出本机的 JAVA 进程虚拟机程序。")]),a._v(" "),e("p",[a._v("这里讲解其中一些，另外一些和前面讲解的差不多，比如这个线程")]),a._v(" "),e("h2",{attrs:{id:"线程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[a._v("#")]),a._v(" 线程")]),a._v(" "),e("p",[e("img",{attrs:{src:t(657),alt:"image-20210117211938381"}})]),a._v(" "),e("p",[a._v("它有一个线程可视化，右侧还有一个 「线程 Dump」这个就是使用 jstack 输出信息。")]),a._v(" "),e("p",[a._v("这个线程可视化还是很方便，很清晰的就能找到产生死锁的两个线程。")]),a._v(" "),e("h2",{attrs:{id:"抽样器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抽样器"}},[a._v("#")]),a._v(" 抽样器")]),a._v(" "),e("p",[e("img",{attrs:{src:t(658),alt:"image-20210117215032826"}})]),a._v(" "),e("p",[a._v("我们最关注的两个性能数据都在这里了")]),a._v(" "),e("h3",{attrs:{id:"cpu-抽样器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cpu-抽样器"}},[a._v("#")]),a._v(" CPU 抽样器")]),a._v(" "),e("p",[a._v("它可以显示方法使用 CPU 时间，一般用于发现热点方法。")]),a._v(" "),e("p",[e("img",{attrs:{src:t(659),alt:"image-20210117215231403"}})]),a._v(" "),e("p",[a._v("比如上图中上一节课我们做的死循环方法，这里就能直接看到。特别是定位程序慢的时候，非常好用")]),a._v(" "),e("h3",{attrs:{id:"内存抽样器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存抽样器"}},[a._v("#")]),a._v(" 内存抽样器")]),a._v(" "),e("p",[a._v("差不多类似 gc 数据，不过这里更详细更直观，能实时动态的展示每个对象的信息")]),a._v(" "),e("p",[e("img",{attrs:{src:t(660),alt:"image-20210117215523473"}})]),a._v(" "),e("h2",{attrs:{id:"插件管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插件管理"}},[a._v("#")]),a._v(" 插件管理")]),a._v(" "),e("h3",{attrs:{id:"visual-gc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#visual-gc"}},[a._v("#")]),a._v(" Visual GC")]),a._v(" "),e("p",[a._v("比如这个界面，名为 Visual GC 的界面")]),a._v(" "),e("p",[e("img",{attrs:{src:t(661),alt:"image-20210117215848221"}})]),a._v(" "),e("p",[a._v("该功能默认是没有的，是通过插件安装的。")]),a._v(" "),e("p",[a._v("插件功能通过：顶部菜单「工具」→「插件」打开插件管理中心")]),a._v(" "),e("p",[e("img",{attrs:{src:t(662),alt:"image-20210117220016498"}})]),a._v(" "),e("p",[a._v("笔者这里是可以直接操作安装的，安装完成之后，需要勾选插件，然后重启 JVisualVM 就会出现这个功能了。")]),a._v(" "),e("p",[a._v("如果说，你打开之后直接操作安装无效，则查看下设置里面")]),a._v(" "),e("p",[e("img",{attrs:{src:t(663),alt:"image-20210117220446231"}})]),a._v(" "),e("p",[a._v("需要添加插件中心地址，这个需要添加与你 jdk 版本一样的，里面的地址在 "),e("a",{attrs:{href:"https://visualvm.github.io/pluginscenters.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("官网这个页面"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"btrace-workbench"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#btrace-workbench"}},[a._v("#")]),a._v(" BTrace Workbench")]),a._v(" "),e("p",[a._v("这一个是后面课程中要用到的 BTrace 图形化界面。")]),a._v(" "),e("p",[a._v("安装后，是通过右键的方式进入，如下图")]),a._v(" "),e("p",[e("img",{attrs:{src:t(664),alt:"image-20210117221101215"}})]),a._v(" "),e("p",[e("img",{attrs:{src:t(665),alt:"image-20210117221114887"}})]),a._v(" "),e("p",[a._v("就可以直接编辑 BTrace 脚本了。")])])}),[],!1,null,null,null);s.default=r.exports}}]);