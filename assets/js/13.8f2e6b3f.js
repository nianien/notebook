(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{516:function(s,n,a){s.exports=a.p+"assets/img/25e7b09cf8cb4eaebba42b4598192410.25e7b09c.png"},517:function(s,n,a){s.exports=a.p+"assets/img/image-20210305192551220.cb9830e5.png"},518:function(s,n,a){s.exports=a.p+"assets/img/66a6d229058c7072ab5b28ef518da302.66a6d229.png"},519:function(s,n,a){s.exports=a.p+"assets/img/image-20210305193331910.81a6a996.png"},520:function(s,n,a){s.exports=a.p+"assets/img/image-20210305193408952.daccbe40.png"},521:function(s,n,a){s.exports=a.p+"assets/img/image-20210306102133840.ea9bec75.png"},522:function(s,n,a){s.exports=a.p+"assets/img/image-20210305195213500.438e1a98.png"},523:function(s,n,a){s.exports=a.p+"assets/img/fffa3a65e367c496428f3c0c4dac8a37.fffa3a65.png"},748:function(s,n,a){"use strict";a.r(n);var t=a(13),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_02-把大象装进冰箱-http-传输大文件的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_02-把大象装进冰箱-http-传输大文件的方法"}},[s._v("#")]),s._v(" 02 | 把大象装进冰箱：HTTP 传输大文件的方法")]),s._v(" "),t("p",[s._v("上次我们谈到了 HTTP 报文里的 body，知道了 HTTP 可以传输很多种类的数据，不仅是文本，也能传输图片、音频和视频。")]),s._v(" "),t("p",[s._v("早期互联网上传输的基本上都是只有几 K 大小的文本和小图片，现在的情况则大有不同。网页里包含的信息实在是太多了，随随便便一个主页 HTML 就有可能上百 K，高质量的图片都以 M 论，更不要说那些电影、电视剧了，几 G、几十 G 都有可能。")]),s._v(" "),t("p",[s._v("相比之下，100M 的光纤固网或者 4G 移动网络在这些大文件的压力下都变成了 「小水管」，无论是上传还是下载，都会把网络传输链路挤的「满满当当」。")]),s._v(" "),t("p",[s._v("所以，"),t("strong",[s._v("如何在有限的带宽下高效快捷地传输这些大文件就成了一个重要的课题")]),s._v(" 。这就好比是已经打开了冰箱门（建立连接），该怎么把大象（文件）塞进去再关上门（完成传输）呢？")]),s._v(" "),t("p",[s._v("今天我们就一起看看 HTTP 协议里有哪些手段能解决这个问题。")]),s._v(" "),t("h2",{attrs:{id:"数据压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据压缩"}},[s._v("#")]),s._v(" 数据压缩")]),s._v(" "),t("p",[s._v("还记得上一讲中说到的 "),t("strong",[s._v("数据类型与编码")]),s._v(" 吗？如果你还有印象的话，肯定能够想到一个最基本的解决方案，那就是 "),t("strong",[s._v("数据压缩")]),s._v(" ，把大象变成小猪佩奇，再放进冰箱。")]),s._v(" "),t("p",[s._v("通常浏览器在发送请求时都会带着 "),t("strong",[s._v("Accept-Encoding")]),s._v(" 头字段，里面是 "),t("strong",[s._v("浏览器支持的压缩格式列表")]),s._v(" ，例如 gzip、deflate、br 等，这样服务器就可以从中选择一种压缩算法，放进 "),t("strong",[s._v("Content-Encoding")]),s._v(" 响应头里，再把原数据压缩后发给浏览器。")]),s._v(" "),t("p",[s._v("如果压缩率能有 50%，也就是说 100K 的数据能够压缩成 50K 的大小，那么就相当于在带宽不变的情况下网速提升了一倍，加速的效果是非常明显的。")]),s._v(" "),t("p",[s._v("不过这个解决方法也有个缺点，gzip 等压缩算法通常只对文本文件有较好的压缩率，而图片、音频视频等多媒体数据本身就已经是高度压缩的，再用 gzip 处理也不会变小（甚至还有可能会增大一点），所以它就失效了。")]),s._v(" "),t("p",[s._v("不过数据压缩在处理文本的时候效果还是很好的，所以各大网站的服务器都会使用这个手段作为保底。例如，在 Nginx 里就会使用 "),t("code",[s._v("gzip on")]),s._v(" 指令，启用对 "),t("code",[s._v("text/html")]),s._v(" 的压缩。")]),s._v(" "),t("h2",{attrs:{id:"分块传输"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分块传输"}},[s._v("#")]),s._v(" 分块传输")]),s._v(" "),t("p",[s._v("在数据压缩之外，还能有什么办法来解决大文件的问题呢？")]),s._v(" "),t("p",[s._v("压缩是把大文件整体变小，我们可以反过来思考，如果大文件整体不能变小，那就把它 "),t("strong",[s._v("拆开")]),s._v(" ，分解成多个小块，把这些小块分批发给浏览器，浏览器收到后再组装复原。")]),s._v(" "),t("p",[s._v("这样浏览器和服务器都不用在内存里保存文件的全部，每次只收发一小部分，网络也不会被大文件长时间占用，内存、带宽等资源也就节省下来了。")]),s._v(" "),t("p",[s._v("这种 "),t("strong",[s._v("化整为零")]),s._v(" 的思路在 HTTP 协议里就是 "),t("strong",[s._v("chunked")]),s._v(" 分块传输编码，在响应报文里用头字段 "),t("strong",[s._v("Transfer-Encoding: chunked")]),s._v(" 来表示，意思是报文里的 body 部分不是一次性发过来的，而是分成了许多的块（chunk）逐个发送。")]),s._v(" "),t("p",[s._v("这就好比是用魔法把大象变成乐高积木，拆散了逐个装进冰箱，到达目的地后再施法拼起来满血复活。")]),s._v(" "),t("p",[t("strong",[s._v("分块传输也可以用于流式数据")]),s._v(" ，例如由数据库动态生成的表单页面，这种情况下 "),t("strong",[s._v("body 数据的长度是未知的")]),s._v(" ，无法在头字段 "),t("strong",[s._v("Content-Length")]),s._v(" 里给出确切的长度，所以也只能用 chunked 方式分块发送。")]),s._v(" "),t("p",[t("code",[s._v("Transfer-Encoding: chunked")]),s._v(" 和 "),t("code",[s._v("Content-Length")]),s._v(" 这两个字段是 "),t("strong",[s._v("互斥的")]),s._v(" ，也就是说响应报文里这两个字段不能同时出现，一个响应报文的传输要么是长度已知，要么是长度未知（chunked），这一点你一定要记住。")]),s._v(" "),t("p",[s._v("下面我们来看一下分块传输的编码规则，其实也很简单，同样采用了明文的方式，很类似响应头。")]),s._v(" "),t("ol",[t("li",[s._v("每个分块包含两个部分，长度头和数据块；")]),s._v(" "),t("li",[s._v("长度头是以 CRLF（回车换行，即 "),t("code",[s._v("\\r\\n")]),s._v(" ）结尾的一行明文，用 16 进制数字表示长度；")]),s._v(" "),t("li",[s._v("数据块紧跟在长度头后，最后也用 CRLF 结尾，但数据不包含 CRLF；")]),s._v(" "),t("li",[s._v("最后用一个长度为 0 的块表示结束，即 "),t("code",[s._v("0\\r\\n\\r\\n")]),s._v("。")])]),s._v(" "),t("p",[s._v("听起来好像有点难懂，看一下图就好理解了：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(516),alt:"img"}})]),s._v(" "),t("p",[s._v("实验环境里的 URI "),t("code",[s._v("/16-1")]),s._v(" 简单地模拟了分块传输，可以用 Chrome 访问这个地址看一下效果：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(517),alt:"image-20210305192551220"}})]),s._v(" "),t("p",[s._v("不过浏览器在收到分块传输的数据后会自动按照规则去掉分块编码，重新组装出内容，所以想要看到服务器发出的原始报文形态就得用 Telnet 手工发送请求（或者用 Wireshark 抓包）：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("GET /16-1 HTTP/1.1\nHost: www.chrono.com\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("因为 Telnet 只是收到响应报文就完事了，不会解析分块数据，所以可以很清楚地看到响应报文里的 chunked 数据格式：先是一行 16 进制长度，然后是数据，然后再是 16 进制长度和数据，如此重复，最后是 0 长度分块结束。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(518),alt:"img"}})]),s._v(" "),t("p",[s._v("通抓包的格式如下")]),s._v(" "),t("p",[t("img",{attrs:{src:a(519),alt:"image-20210305193331910"}})]),s._v(" "),t("p",[s._v("可以简单验证下，响应的包，如下图所示：从响应的快中来看，的确是第二条数据")]),s._v(" "),t("p",[t("img",{attrs:{src:a(520),alt:"image-20210305193408952"}})]),s._v(" "),t("p",[s._v("笔者还是很好奇分块传输后端是如何做的呢？看看对应的 lua 代码")]),s._v(" "),t("div",{staticClass:"language-lua line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lua"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- Copyright (C) 2019 by chrono")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- chunked")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--ngx.header['Content-Type'] = 'text/plain'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--ngx.header['Transfer-Encoding'] = 'chunked'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    ngx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'chunked data '")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("..")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\n'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    ngx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("flush")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("可以看到，直接写入 body 中的，然后刷新，对应的具体 java 代码笔者暂时就猜不到了。后续有实战后再来补充说明")]),s._v(" "),t("h2",{attrs:{id:"范围请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#范围请求"}},[s._v("#")]),s._v(" 范围请求")]),s._v(" "),t("p",[s._v("有了分块传输编码，服务器就可以轻松地收发大文件了，但对于上 G 的超大文件，还有一些问题需要考虑。")]),s._v(" "),t("p",[s._v("比如，你在看当下正热播的某穿越剧，想跳过片头，直接看正片，或者有段剧情很无聊，想拖动进度条快进几分钟，"),t("strong",[s._v("这实际上是想获取一个大文件其中的片段数据")]),s._v(" ，而分块传输并没有这个能力。")]),s._v(" "),t("p",[s._v("HTTP 协议为了满足这样的需求，提出了 "),t("strong",[s._v("范围请求")]),s._v(" （range requests）的概念，允许客户端在请求头里使用专用字段来表示只获取文件的一部分，相当于是 "),t("strong",[s._v("客户端的「化整为零")]),s._v("」 。")]),s._v(" "),t("p",[s._v("范围请求不是 Web 服务器必备的功能，可以实现也可以不实现，所以服务器必须在响应头里使用字段 "),t("strong",[s._v("Accept-Ranges: bytes")]),s._v(" 明确告知客户端：「我是支持范围请求的」。")]),s._v(" "),t("p",[s._v("如果不支持的话该怎么办呢？服务器可以发送 "),t("code",[s._v("Accept-Ranges: none")]),s._v(" ，或者干脆不发送 "),t("code",[s._v("Accept-Ranges")]),s._v(" 字段，这样客户端就认为服务器没有实现范围请求功能，只能老老实实地收发整块文件了。")]),s._v(" "),t("p",[s._v("请求头 "),t("strong",[s._v("Range")]),s._v(" 是 HTTP 范围请求的专用字段，格式是 "),t("strong",[s._v("bytes=x-y")]),s._v("，其中的 x 和 y 是以字节为单位的数据范围。")]),s._v(" "),t("p",[s._v("要注意 x、y 表示的是 "),t("strong",[s._v("偏移量")]),s._v(" ，范围必须从 0 计数，例如前 10 个字节表示为 "),t("code",[s._v("0-9")]),s._v("，第二个 10 字节表示为 "),t("code",[s._v("10-19")]),s._v(" ，而 "),t("code",[s._v("0-10")]),s._v(" 实际上是前 11 个字节。")]),s._v(" "),t("p",[s._v("Range 的格式也很灵活，起点 x 和终点 y 可以省略，能够很方便地表示正数或者倒数的范围。"),t("strong",[s._v("假设文件是 100 个字节")]),s._v(" ，那么：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("0-")]),s._v(" 表示从文档起点到文档终点，相当于 "),t("code",[s._v("0-99")]),s._v(" ，即整个文件；")]),s._v(" "),t("li",[t("code",[s._v("10-")]),s._v(" 是从第 10 个字节开始到文档末尾，相当于 "),t("code",[s._v("10-99")]),s._v("；")]),s._v(" "),t("li",[t("code",[s._v("-1")]),s._v(" 是文档的最后一个字节，相当于 "),t("code",[s._v("99-99")]),s._v(" ；")]),s._v(" "),t("li",[t("code",[s._v("-10")]),s._v(" 是从文档末尾倒数 10 个字节，相当于 "),t("code",[s._v("90-99")]),s._v(" 。")])]),s._v(" "),t("p",[s._v("服务器收到 Range 字段后，需要做四件事。")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("第一，它必须检查范围是否合法")]),s._v(" "),t("p",[s._v("比如文件只有 100 个字节，但请求 "),t("code",[s._v("200-300")]),s._v(" ，这就是范围越界了。服务器就会返回状态码 "),t("strong",[s._v("416")]),s._v("，意思是「你的范围请求有误，我无法处理，请再检查一下」。")])]),s._v(" "),t("li",[t("p",[s._v("第二，如果范围正确，服务器就可以根据 Range 头计算偏移量，读取文件的片段了，返回状态码 "),t("strong",[s._v("206 Partial Content")]),s._v(" ，和 200 的意思差不多，但表示 body 只是原数据的一部分。")])]),s._v(" "),t("li",[t("p",[s._v("第三，服务器要添加一个响应头字段 "),t("strong",[s._v("Content-Range")])]),s._v(" "),t("p",[s._v("告诉片段的实际偏移量和资源的总大小，格式是 "),t("strong",[s._v("bytes x-y/length")]),s._v(" ，与 Range 头区别在没有 "),t("code",[s._v("=")]),s._v("，范围后多了总长度。例如，对于 "),t("code",[s._v("0-10")]),s._v(" 的范围请求，值就是 "),t("code",[s._v("bytes 0-10/100")]),s._v(" 。")])]),s._v(" "),t("li",[t("p",[s._v("最后剩下的就是发送数据了，直接把片段用 TCP 发给客户端，一个范围请求就算是处理完了。")])])]),s._v(" "),t("p",[s._v("你可以用实验环境的 URI "),t("code",[s._v("/16-2")]),s._v(" 来测试范围请求，它处理的对象是 "),t("code",[s._v("/mime/a.txt")]),s._v(" 。不过我们不能用 Chrome 浏览器，因为它没有编辑 HTTP 请求头的功能（这点上不如 Firefox 方便），所以还是要用 Telnet。")]),s._v(" "),t("p",[s._v("例如下面的这个请求使用 Range 字段获取了文件的前 32 个字节：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("GET /16-2 HTTP/1.1\nHost: www.chrono.com\nRange: bytes=0-31\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("返回的数据是（去掉了几个无关字段）：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("HTTP/1.1 206 Partial Content\nContent-Length: 32\nAccept-Ranges: bytes\nContent-Range: bytes 0-31/96\n \n// this is a plain text json doc\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("笔者这里还介绍一种工具，idea 的 xx.http 文件功能，")]),s._v(" "),t("p",[t("img",{attrs:{src:a(521),alt:"image-20210306102133840"}})]),s._v(" "),t("p",[s._v("文件内容如下")]),s._v(" "),t("div",{staticClass:"language-http line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token request-line"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("GET")]),s._v(" http://www.chrono.com/16-2 HTTP/1.1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Host:")]),s._v(" www.chrono.com\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Range:")]),s._v(" bytes=0-31\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("通过抓包如下图所示")]),s._v(" "),t("p",[t("img",{attrs:{src:a(522),alt:"image-20210305195213500"}})]),s._v(" "),t("p",[s._v("有了范围请求之后，HTTP 处理大文件就更加轻松了，看视频时可以根据时间点计算出文件的 Range，不用下载整个文件，直接精确获取片段所在的数据内容。")]),s._v(" "),t("p",[s._v("不仅看视频的拖拽进度需要范围请求，常用的下载工具里的多段下载、断点续传也是基于它实现的，要点是：")]),s._v(" "),t("ul",[t("li",[s._v("先发个 HEAD，看服务器是否支持范围请求，同时获取文件的大小；")]),s._v(" "),t("li",[s._v("开 N 个线程，每个线程使用 Range 字段划分出各自负责下载的片段，发请求传输数据；")]),s._v(" "),t("li",[s._v("下载意外中断也不怕，不必重头再来一遍，只要根据上次的下载记录，用 Range 请求剩下的那一部分就可以了。")])]),s._v(" "),t("p",[s._v("后端代码是如何处理的呢？")]),s._v(" "),t("div",{staticClass:"language-lua line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lua"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- Copyright (C) 2019 by chrono")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 使用 ngx_http_range_filter_module 模块来处理范围请求")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("local")]),s._v(" path "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/mime/a.txt"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- Accept-Ranges: bytes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" ngx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("var"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("http_range "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    ngx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Accept-Ranges'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'bytes'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" ngx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("exec")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("path"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 我们自己解析处理范围请求的简单逻辑如下")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--[==[\n-- 获取 range 头\nlocal range = ngx.var.http_range\n\nngx.status = 400\nstr = \"only test for range request\\n\"\n\n-- 检查 range header 头部\nif not range then\n    ngx.header['Content-Length'] = #str\n\n    return ngx.print(str)\nend\n--ngx.log(ngx.ERR, \"range is: \", range)\n\nstr = \"range field error\\n\"\n\n-- 检查 range 格式，bytes 0-10/100\nlocal m = ngx.re.match(range, [[bytes=(\\d+)-(\\d+)]], \"ijo\")\n--ngx.log(ngx.ERR, \"re is: \", m[0] or 'no re')\nif not m then\n    ngx.header['Content-Length'] = #str\n    return ngx.print(str)\nend\n\n-- 获取 a-b 中的 a 和 b； 0-10\nlocal start_pos = tonumber(m[1])\nlocal end_pos = tonumber(m[2])\n\n-- 这两个值必须存在\nif not start_pos or not end_pos or\n   start_pos > end_pos then\n\n    ngx.header['Content-Length'] = #str\n    return ngx.print(str)\nend\n\n-- 计算要给出的文件大小（当次请求需要给出的块大小）\nlocal range_num = end_pos - start_pos + 1\n--local fake_content_length = range_num + 500\n\nngx.status = 416\nstr = \"range too huge for test\\n\"\n\nif range_num > 1000 then\n    ngx.header['Content-Length'] = #str\n    return ngx.print(str)\nend\n\nngx.status = 206    -- partial content\nngx.header['Accept-Range'] = 'bytes'\nngx.header['Content-Range'] = 'bytes ' ..\n                              start_pos ..\n                              '-' ..\n                              end_pos ..\n                              '/' ..\n                              range_num + 500\n\nstr = 'data:' .. string.rep('x', range_num - 5)\nngx.header['Content-Length'] = #str\n\nngx.print(str)\n--]==]")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br")])]),t("p",[s._v("笔者对 lua 代码也不是特别的熟悉，可以看懂部分代码，上面给出了注释，下面再总结下该代码的主要处理流程如下（不包含检查边界逻辑）：")]),s._v(" "),t("ol",[t("li",[s._v("获取 "),t("code",[s._v("Range: bytes=0-31")]),s._v(" 头中的范围， 0 和 31")]),s._v(" "),t("li",[s._v("计算出当次要给出的文件大小，也就是 31- 0 + 1，将文件按照此偏移量，截取出二进制数据（此例中，应该是用字符串?）放入 body 中")]),s._v(" "),t("li",[s._v("计算文件的总大小")]),s._v(" "),t("li",[s._v("写响应头\n"),t("ul",[t("li",[s._v("状态：HTTP/1.1 206 Partial Content")]),s._v(" "),t("li",[s._v("此次 body 的内容大小：Content-Length: 32")]),s._v(" "),t("li",[s._v("响应客户端支持范围请求：Accept-Ranges: bytes")]),s._v(" "),t("li",[s._v("响应此次给出的文件偏移量和总大小：Content-Range: bytes 0-31/96")])])])]),s._v(" "),t("h2",{attrs:{id:"多段数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多段数据"}},[s._v("#")]),s._v(" 多段数据")]),s._v(" "),t("p",[s._v("刚才说的范围请求一次只获取一个片段，其实它还支持在 Range 头里使用多个 "),t("code",[s._v("x-y")]),s._v("，一次性获取多个片段数据。")]),s._v(" "),t("p",[s._v("这种情况需要使用一种特殊的 MIME 类型："),t("strong",[s._v("multipart/byteranges")]),s._v("，表示报文的 body 是由多段字节序列组成的，并且还要用一个参数 "),t("strong",[s._v("boundary=xxx")]),s._v(" 给出段之间的分隔标记。")]),s._v(" "),t("p",[s._v("多段数据的格式与分块传输也比较类似，但它需要用分隔标记 boundary 来区分不同的片段，可以通过图来对比一下。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(523),alt:"img"}})]),s._v(" "),t("p",[s._v("每一个分段必须以 "),t("code",[s._v("--boundary")]),s._v(" 开始（前面加两个 "),t("code",[s._v("-")]),s._v(" ），之后要用 "),t("code",[s._v("Content-Type")]),s._v(" 和 "),t("code",[s._v("Content-Range")]),s._v(" 标记这段数据的类型和所在范围，然后就像普通的响应头一样以回车换行结束，再加上分段数据，最后用一个 "),t("code",[s._v("--boundary- -")]),s._v("（前后各有两个 "),t("code",[s._v("-")]),s._v("）表示所有的分段结束。")]),s._v(" "),t("p",[s._v("例如，我们在实验环境里用 Telnet 发出有两个范围的请求：")]),s._v(" "),t("div",{staticClass:"language-http line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token request-line"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("GET")]),s._v(" /16-2 HTTP/1.1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Host:")]),s._v(" www.chrono.com\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Range:")]),s._v(" bytes=0-9, 20-29\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("得到的结果是下面这样")]),s._v(" "),t("div",{staticClass:"language-http line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token response-status"}},[s._v("HTTP/1.1 "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("206 Partial Content")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Content-Type:")]),s._v(" multipart/byteranges; boundary=00000000001\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Content-Length:")]),s._v(" 189\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Connection:")]),s._v(" keep-alive\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Accept-Ranges:")]),s._v(" bytes\n \n \n--00000000001\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Content-Type:")]),s._v(" text/plain\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Content-Range:")]),s._v(" bytes 0-9/96\n \n// this is\n--00000000001\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Content-Type:")]),s._v(" text/plain\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Content-Range:")]),s._v(" bytes 20-29/96\n \next json d\n--00000000001--\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[s._v("报文里的 "),t("code",[s._v("--00000000001")]),s._v(" 就是多段的分隔符，使用它客户端就可以很容易地区分出多段 Range 数据。")]),s._v(" "),t("p",[s._v("这块代码的后端代码是上面范围请求里面的代码，它使用了 ngx_http_range_filter_module 来处理该请求，如果要自己处理也如同上面讲解的那样将数据拼接好即可。")]),s._v(" "),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),t("p",[s._v("今天我们学习了 HTTP 传输大文件相关的知识，在这里做一下简单小结：")]),s._v(" "),t("ol",[t("li",[s._v("压缩 HTML 等文本文件是传输大文件最基本的方法；")]),s._v(" "),t("li",[s._v("分块传输可以流式收发数据，节约内存和带宽，使用响应头字段 "),t("code",[s._v("Transfer-Encoding: chunked")]),s._v(" 来表示，分块的格式是 16 进制长度头 + 数据块；")]),s._v(" "),t("li",[s._v("范围请求可以只获取部分数据，即 "),t("strong",[s._v("分块请求")]),s._v("，实现视频拖拽或者断点续传，使用请求头字段 "),t("code",[s._v("Range")]),s._v(" 和响应头字段 "),t("code",[s._v("Content-Range")]),s._v(" ，响应状态码必须是 206；")]),s._v(" "),t("li",[s._v("也可以一次请求多个范围，这时候响应报文的数据类型是 "),t("code",[s._v("multipart/byteranges")]),s._v(" ，body 里的多个部分会用 boundary 字符串分隔。")])]),s._v(" "),t("p",[s._v("要注意这四种方法不是互斥的，而是可以混合起来使用，例如压缩后再分块传输，或者分段后再分块，实验环境的 URI "),t("code",[s._v("/16-3")]),s._v(" 就模拟了后一种的情形，你可以自己用 Telnet 试一下。")]),s._v(" "),t("div",{staticClass:"language-http line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[t("span",{pre:!0,attrs:{class:"token request-line"}},[t("span",{pre:!0,attrs:{class:"token property"}},[s._v("GET")]),s._v(" http://www.chrono.com/16-3 HTTP/1.1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Host:")]),s._v(" www.chrono.com\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Range:")]),s._v(" bytes=0-9, 20-29\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("响应如下")]),s._v(" "),t("div",{staticClass:"language-http line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-http"}},[t("code",[s._v("GET http://www.chrono.com/16-3\n\n"),t("span",{pre:!0,attrs:{class:"token response-status"}},[s._v("HTTP/1.1 "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v("200 OK")])]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Server:")]),s._v(" openresty/1.15.8.1\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Date:")]),s._v(" Sat, 06 Mar 2021 01:55:17 GMT\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Content-Type:")]),s._v(" multipart/byteranges; boundary=xyz\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Transfer-Encoding:")]),s._v(" chunked\t\t\t\t// 这里使用了 chunked 分开 和 范围请求\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Connection:")]),s._v(" keep-alive\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Accept-Ranges:")]),s._v(" bytes\n\n--xyz\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Content-Type:")]),s._v(" text/plain\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Content-Range:")]),s._v(" bytes 0-9/90\n\n// this is\n--xyz\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Content-Type:")]),s._v(" text/plain\n"),t("span",{pre:!0,attrs:{class:"token header-name keyword"}},[s._v("Content-Range:")]),s._v(" bytes 20-29/90\n\next json d\n--xyz--\n\n\nResponse code: 200 (OK); Time: 133ms; Content length: 152 bytes\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v("后端代码实现")]),s._v(" "),t("div",{staticClass:"language-lua line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-lua"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- Copyright (C) 2019 by chrono")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- chunked range")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--[[\nGET /16-2 HTTP/1.1\nHost: www.chrono.com\nRange: bytes=0-9, 20-29\n\n--xyz\nContent-Type: text/plain\nContent-Range: bytes 0-9/90\n\n// this is\n--xyz\nContent-Type: text/plain\nContent-Range: bytes 20-29/90\n\next json d\n--xyz--\n--]]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--ngx.header['Content-Type'] = 'text/plain'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--ngx.header['Transfer-Encoding'] = 'chunked'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 响应支持范围请求")]),s._v("\nngx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Accept-Ranges'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'bytes'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 分段响应")]),s._v("\nngx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("header"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Content-Type'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'multipart/byteranges; boundary=xyz'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 模拟 multipart 响应")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("local")]),s._v(" strs "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 1st part")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("[[\n--xyz\nContent-Type: text/plain\nContent-Range: bytes 0-9/90\n\n// this is\n]]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- 2nd part")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("[[\n--xyz\nContent-Type: text/plain\nContent-Range: bytes 20-29/90\n\next json d\n]]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- last part")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("[[\n--xyz--\n]]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("-- flush for chunked")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" _"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("v "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ipairs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("strs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v("\n    ngx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("v"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    ngx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("flush")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br")])]),t("h2",{attrs:{id:"课下作业"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课下作业"}},[s._v("#")]),s._v(" 课下作业")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("分块传输数据的时候，如果数据里含有回车换行（"),t("code",[s._v("\\r\\n")]),s._v("）是否会影响分块的处理呢？")]),s._v(" "),t("p",[s._v("由于分块响应时，报文结构给出了当前块的数据长度，所以不影响")])]),s._v(" "),t("li",[t("p",[s._v("如果对一个被 gzip 的文件执行范围请求，比如 "),t("code",[s._v("Range: bytes=10-19")]),s._v(" ，那么这个范围是应用于原文件还是压缩后的文件呢？")]),s._v(" "),t("p",[s._v("记住一个规则："),t("strong",[s._v("range 是针对原文件的")])])])]),s._v(" "),t("h2",{attrs:{id:"课外小贴士"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#课外小贴士"}},[s._v("#")]),s._v(" 课外小贴士")]),s._v(" "),t("ul",[t("li",[s._v("gzip 的压缩率通常能够超过 60%，而 br 算法是专门为 HTML 设计的，压缩效率和性能比 gzip 还要好，能够再提高 20% 的压缩密度")]),s._v(" "),t("li",[s._v("Nginx 的 "),t("code",[s._v("gzip on")]),s._v(" 指令很智能，只会压缩文本数据，不会压缩图片、音频、视频")]),s._v(" "),t("li",[t("code",[s._v("Transfer-Encoding")]),s._v(" 字段最常见的值是 chunked，但也可以用 gzip、deflate 等，表示传输时使用了压缩编码。注意这与 "),t("code",[s._v("Content-Encoding")]),s._v(" 不同，"),t("code",[s._v("Transfer-Encoding")]),s._v(" 在传输后会被自动解码还原出原始数据，而 "),t("code",[s._v("Content-Encoding")]),s._v(" 则必须由应用自行解码")]),s._v(" "),t("li",[s._v("分块传输在末尾还允许有 「拖尾数据」，由响应字段 Trailer 指定")]),s._v(" "),t("li",[s._v("与 Range 有关的还有一个 "),t("code",[s._v("If-Range")]),s._v(" ，即条件范围请求，将在后续章节讲解")])]),s._v(" "),t("h2",{attrs:{id:"拓展阅读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拓展阅读"}},[s._v("#")]),s._v(" 拓展阅读")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("http 交给 tcp 进行传输的时候本来就会分块，那 http 分块的意义是什么呢？")]),s._v(" "),t("p",[s._v("在 http 层是看不到 tcp 的，它不知道下层协议是否会分块，下层是否分块对它来说没有意义，不关心。")]),s._v(" "),t("p",[s._v("在 http 里一个报文必须是完整交付，在处理大文件的时候就很不方便，所以就要分块，在 http 层面方便处理。")]),s._v(" "),t("p",[s._v("chunked 主要是在 http 的层次来解决问题。")])]),s._v(" "),t("li",[t("p",[s._v("客户端上传也可以使用 chunked、gzip，但不能用 range，注意这些字段的类型，只要是 "),t("strong",[s._v("实体字段")]),s._v("，那就在请求响应里都可以用。")])]),s._v(" "),t("li",[t("p",[s._v("分块传输、分段传输，用的一个 tcp 连接吗？")]),s._v(" "),t("p",[s._v("一个 http 请求必定是在一个 tcp 连接里收发的，虽然是分块，但也是用一个 tcp，所以在范围请求的时候，可以使用多线程建立多个 tcp 连接获取，最后拼接起来原文件")])]),s._v(" "),t("li",[t("p",[s._v("区分一个字段是什么类型？比如请求字段、响应字段还是通用字段")]),s._v(" "),t("p",[s._v("rfc 里有说明，其次多看看 http 抓包就能熟悉，不需要刻意去记")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("Transfer-Encoding: chunked")]),s._v(" 表示分段传输，改成 "),t("code",[s._v("Transfer-Encoding: gzip")]),s._v(" 以后会自动解压，分段传输的语意还在么")]),s._v(" "),t("p",[s._v("看字段的值，没有 chunked，那就不是分块，只是压缩。")]),s._v(" "),t("p",[t("code",[s._v("Transfer-Encoding: chunked,gzip")]),s._v(" 这样的多种组合理论上是可行的，但一般用的比较少。")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);