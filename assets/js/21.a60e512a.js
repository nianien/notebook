(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{553:function(t,s,_){t.exports=_.p+"assets/img/28237ef93ce0ddca076d2dc19c16fdf9.28237ef9.png"},554:function(t,s,_){t.exports=_.p+"assets/img/8c1fe47a7ca4b52702a6a14956033f7c.8c1fe47a.png"},555:function(t,s,_){t.exports=_.p+"assets/img/52a3bd760584972011f6be1a5258e2d7.52a3bd76.png"},556:function(t,s,_){t.exports=_.p+"assets/img/c5aa6d5f82e8cc1a35772293972446e7.c5aa6d5f.png"},557:function(t,s,_){t.exports=_.p+"assets/img/image-20210309113745228.adf98ace.png"},558:function(t,s,_){t.exports=_.p+"assets/img/5a247e9e5bf66f5ac3316fddf4e2b254.5a247e9e.png"},753:function(t,s,_){"use strict";_.r(s);var v=_(13),a=Object(v.a)({},(function(){var t=this,s=t.$createElement,v=t._self._c||s;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"_07-良心中间商-http-的代理服务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_07-良心中间商-http-的代理服务"}},[t._v("#")]),t._v(" 07 | 良心中间商：HTTP 的代理服务")]),t._v(" "),v("p",[t._v("在前面讲 HTTP 协议的时候，我们严格遵循了 HTTP 的 "),v("strong",[t._v("请求 - 应答")]),t._v(" 模型，协议中只有两个互相通信的角色，分别是 "),v("strong",[t._v("请求方")]),t._v(" 浏览器（客户端）和 "),v("strong",[t._v("应答方")]),t._v(" 服务器。")]),t._v(" "),v("p",[t._v("今天，我们要在这个模型里引入一个新的角色，那就是 "),v("strong",[t._v("HTTP 代理")]),t._v(" 。")]),t._v(" "),v("p",[t._v("引入 HTTP 代理后，原来简单的双方通信就变复杂了一些，加入了一个或者多个 "),v("strong",[t._v("中间人")]),t._v(" ，但整体上来看，还是一个有顺序关系的链条，而且链条里相邻的两个角色仍然是简单的一对一通信，不会出现越级的情况。")]),t._v(" "),v("p",[v("img",{attrs:{src:_(553),alt:"img"}})]),t._v(" "),v("p",[t._v("链条的起点还是客户端（也就是浏览器），中间的角色被称为代理服务器（proxy server），链条的终点被称为源服务器（origin server），意思是数据的「源头」、「起源」。")]),t._v(" "),v("h2",{attrs:{id:"代理服务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代理服务"}},[t._v("#")]),t._v(" 代理服务")]),t._v(" "),v("p",[t._v("代理这个词听起来好像很神秘，有点高大上的感觉。")]),t._v(" "),v("p",[t._v("但其实 HTTP 协议里对它并没有什么特别的描述，它就是 "),v("strong",[t._v("在客户端和服务器原本的通信链路中插入的一个中间环节")]),t._v(" ，也是一台服务器，但提供的是「代理服务」。")]),t._v(" "),v("p",[t._v("所谓的代理服务就是指服务本身不生产内容，而是处于中间位置 "),v("strong",[t._v("转发上下游的请求和响应")]),t._v(" ，具有双重身份：面向下游的用户时，表现为服务器，代表源服务器响应客户端的请求；而面向上游的源服务器时，又表现为客户端，代表客户端发送请求。")]),t._v(" "),v("p",[t._v("还是拿上一讲的生鲜超市来打个比方。")]),t._v(" "),v("p",[t._v("之前你都是从超市里买东西，现在楼底下新开了一家 24 小时便利店，由超市直接供货，于是你就可以在便利店里买到原本必须去超市才能买到的商品。")]),t._v(" "),v("p",[t._v("这样超市就不直接和你打交道了，成了源服务器，便利店就成了超市的代理服务器。")]),t._v(" "),v("p",[t._v("在 "),v("RouterLink",{attrs:{to:"/http-protocol/02/04.html#代理"}},[t._v("HTTP 协议概览中-代理")]),t._v(" 中，我曾经说过，代理有很多的种类，例如匿名代理、透明代理、正向代理和反向代理。")],1),t._v(" "),v("p",[t._v("今天我主要讲的是实际工作中最常见的 "),v("strong",[t._v("反向代理")]),t._v(" ，它在传输链路中更靠近源服务器，为源服务器提供代理服务。")]),t._v(" "),v("h2",{attrs:{id:"代理的作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代理的作用"}},[t._v("#")]),t._v(" 代理的作用")]),t._v(" "),v("p",[t._v("为什么要有代理呢？换句话说，代理能干什么、带来什么好处呢？")]),t._v(" "),v("p",[t._v("你也许听过这样一句至理名言：「计算机科学领域里的任何问题，都可以通过引入一个中间层来解决」（在这句话后面还可以再加上一句「如果一个中间层解决不了问题，那就再加一个中间层」）。TCP/IP 协议栈是这样，而代理也是这样。")]),t._v(" "),v("p",[t._v("由于代理处在 HTTP 通信过程的中间位置，相应地就对上屏蔽了真实客户端，对下屏蔽了真实服务器，简单的说就是 "),v("strong",[t._v("欺上瞒下")]),t._v(" 。在这个中间层的小天地里就可以做很多的事情，为 HTTP 协议增加更多的灵活性，实现客户端和服务器的双赢 。")]),t._v(" "),v("p",[t._v("代理最基本的一个功能是 "),v("strong",[t._v("负载均衡")]),t._v(" 。因为在面向客户端时屏蔽了源服务器，客户端看到的只是代理服务器，源服务器究竟有多少台、是哪些 IP 地址都不知道。于是代理服务器就可以掌握请求分发的“大权”，决定由后面的哪台服务器来响应请求。")]),t._v(" "),v("p",[v("img",{attrs:{src:_(554),alt:"img"}})]),t._v(" "),v("p",[t._v("代理中常用的负载均衡算法你应该也有所耳闻吧，比如轮询、一致性哈希等等，这些算法的目标都是尽量把外部的流量合理地分散到多台源服务器，提高系统的整体资源利用率和性能。")]),t._v(" "),v("p",[t._v("在负载均衡的同时，代理服务还可以执行更多的功能，比如：")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("健康检查")]),t._v("：使用 "),v("strong",[t._v("心跳")]),t._v(" 等机制监控后端服务器，发现有故障就及时 "),v("strong",[t._v("踢出")]),t._v(" 集群，保证服务高可用；")]),t._v(" "),v("li",[v("strong",[t._v("安全防护")]),t._v("：保护被代理的后端服务器，限制 IP 地址或流量，抵御网络攻击和过载；")]),t._v(" "),v("li",[v("strong",[t._v("加密卸载")]),t._v("：对外网使用 SSL/TLS 加密通信认证，而在安全的内网不加密，消除加解密成本；")]),t._v(" "),v("li",[v("strong",[t._v("数据过滤")]),t._v("：拦截上下行的数据，任意指定策略修改请求或者响应；")]),t._v(" "),v("li",[v("strong",[t._v("内容缓存")]),t._v("：暂存、复用服务器响应，这个与 "),v("RouterLink",{attrs:{to:"/http-protocol/04/06.html"}},[t._v("上一章的 HTTP 的缓存控制")]),t._v(" 密切相关，我们稍后再说。")],1)]),t._v(" "),v("p",[t._v("接着拿刚才的便利店来举例说明。")]),t._v(" "),v("p",[t._v("因为便利店和超市之间是专车配送，所以有了便利店，以后你买东西就更省事了，打电话给便利店让它去帮你取货，不用关心超市是否停业休息、是否人满为患，而且总能买到最新鲜的。")]),t._v(" "),v("p",[t._v("便利店同时也方便了超市，不用额外加大店面就可以增加客源和销量，货物集中装卸也节省了物流成本，由于便利店直接面对客户，所以也可以把恶意骚扰电话挡在外面。")]),t._v(" "),v("h2",{attrs:{id:"代理相关头字段"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代理相关头字段"}},[t._v("#")]),t._v(" 代理相关头字段")]),t._v(" "),v("p",[t._v("代理的好处很多，但因为它欺上瞒下的特点，"),v("strong",[t._v("隐藏了真实客户端和服务器")]),t._v(" ，如果双方想要获得这些 "),v("strong",[t._v("丢失")]),t._v(" 的原始信息，该怎么办呢？")]),t._v(" "),v("p",[t._v("首先，代理服务器需要用字段 "),v("strong",[t._v("Via")]),t._v(" 标明代理的身份。")]),t._v(" "),v("p",[t._v("Via 是一个通用字段，请求头或响应头里都可以出现。每当报文经过一个代理节点，代理服务器就会把自身的信息追加到字段的末尾，就像是经手人盖了一个章。")]),t._v(" "),v("p",[t._v("如果通信链路中有很多中间代理，就会在 Via 里形成一个链表，这样就可以知道报文究竟走过了多少个环节才到达了目的地。")]),t._v(" "),v("p",[t._v("例如下图中有两个代理：proxy1 和 proxy2，客户端发送请求会经过这两个代理，依次添加就是 "),v("code",[t._v("Via: proxy1, proxy2")]),t._v(" ，等到服务器返回响应报文的时候就要反过来走，头字段就是 "),v("code",[t._v("Via: proxy2, proxy1")]),t._v(" 。")]),t._v(" "),v("p",[v("img",{attrs:{src:_(555),alt:"img"}})]),t._v(" "),v("p",[t._v("Via 字段只解决了  "),v("strong",[t._v("客户端和源服务器判断是否存在代理的问题，还不能知道对方的真实信息")]),t._v(" 。")]),t._v(" "),v("p",[t._v("但服务器的 IP 地址应该是保密的，关系到企业的内网安全，所以一般不会让客户端知道。不过反过来，"),v("strong",[t._v("通常服务器需要知道客户端的真实 IP 地址，方便做访问控制、用户画像、统计分析")]),t._v(" 。")]),t._v(" "),v("p",[t._v("可惜的是 "),v("strong",[t._v("HTTP 标准里并没有为此定义头字段")]),t._v(" ，但已经出现了很多 "),v("strong",[t._v("事实上的标准")]),t._v(" ，最常用的两个头字段是 "),v("strong",[t._v("X-Forwarded-For")]),t._v(" 和 "),v("strong",[t._v("X-Real-IP")]),t._v(" 。")]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("X-Forwarded-For")]),t._v("：链式存储")]),t._v(" "),v("p",[t._v("字面意思是为 "),v("strong",[t._v("谁而转发")]),t._v(" ，形式上和 "),v("code",[t._v("Via")]),t._v(" 差不多，也是每经过一个代理节点就会在字段里追加一个信息，但 Via 追加的是代理主机名（或者域名），而 "),v("code",[t._v("X-Forwarded-For")]),t._v(" 追加的是请求方的 IP 地址。所以，在字段里最左边的 IP 地址就客户端的地址。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("X-Real-IP")]),t._v("：只有客户端 IP 地址")]),t._v(" "),v("p",[t._v("是另一种获取客户端真实 IP 的手段，它的作用很简单，就是记录客户端 IP 地址，没有中间的代理信息。")]),t._v(" "),v("p",[t._v("如果客户端和源服务器之间只有一个代理，那么这两个字段的值就是相同的。")])])]),t._v(" "),v("p",[t._v("我们的实验环境实现了一个反向代理，访问 "),v("code",[t._v("http://www.chrono.com/21-1")]),t._v(" ，它会转而访问 "),v("code",[t._v("http://origin.io")]),t._v(" 。这里的 "),v("code",[t._v("origin.io")]),t._v(" 就是源站，它会在响应报文里输出 "),v("code",[t._v("Via")]),t._v(" 、"),v("code",[t._v("X-Forwarded-For")]),t._v(" 等代理头字段信息：")]),t._v(" "),v("p",[v("img",{attrs:{src:_(556),alt:"img"}})]),t._v(" "),v("p",[t._v("后端处理逻辑")]),t._v(" "),v("p",[v("code",[t._v("http://www.chrono.com/21-1")]),t._v(" 通过 301 跳转到了 "),v("code",[t._v("https://www.origin.io/proxy/")])]),t._v(" "),v("div",{staticClass:"language-lua line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-lua"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" path "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/proxy/"')]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v('--ngx.log(ngx.ERR, "exec " .. path)')]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- redirect to internal /proxy")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ngx"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("exec")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br")])]),v("p",[t._v("看源码是如何跳转过去的呢？")]),t._v(" "),v("div",{staticClass:"language-lua line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-lua"}},[v("code",[t._v("    "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),t._v(" proxy pass to origin\n    location  "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("proxy"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),t._v(" gzip "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" vary\n        "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),t._v("gzip on"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),t._v("gzip_vary on"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        internal"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        add_header  Via $host"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("$server_port"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),t._v("proxy_set_header Host $host"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("#")]),t._v("proxy_http_version "),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        proxy_set_header X"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Real"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("IP          $remote_addr"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("$remote_port"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy_set_header X"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Forwarded"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Host   $http_host"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy_set_header X"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Forwarded"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Proto  $scheme"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy_set_header X"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Forwarded"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("For    $proxy_add_x_forwarded_for"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        proxy_pass http"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v("origin"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br"),v("span",{staticClass:"line-number"},[t._v("5")]),v("br"),v("span",{staticClass:"line-number"},[t._v("6")]),v("br"),v("span",{staticClass:"line-number"},[t._v("7")]),v("br"),v("span",{staticClass:"line-number"},[t._v("8")]),v("br"),v("span",{staticClass:"line-number"},[t._v("9")]),v("br"),v("span",{staticClass:"line-number"},[t._v("10")]),v("br"),v("span",{staticClass:"line-number"},[t._v("11")]),v("br"),v("span",{staticClass:"line-number"},[t._v("12")]),v("br"),v("span",{staticClass:"line-number"},[t._v("13")]),v("br"),v("span",{staticClass:"line-number"},[t._v("14")]),v("br"),v("span",{staticClass:"line-number"},[t._v("15")]),v("br"),v("span",{staticClass:"line-number"},[t._v("16")]),v("br"),v("span",{staticClass:"line-number"},[t._v("17")]),v("br"),v("span",{staticClass:"line-number"},[t._v("18")]),v("br"),v("span",{staticClass:"line-number"},[t._v("19")]),v("br"),v("span",{staticClass:"line-number"},[t._v("20")]),v("br")])]),v("p",[t._v("上面这段代码，所有的配置文件都引用了它，也就是说，其实它是转发到了 "),v("code",[t._v("http://www.chrono.com/proxy")]),t._v(" 但是这里面配置了是代理到 "),v("code",[t._v("proxy_pass http://origin.io")])]),t._v(" "),v("p",[v("img",{attrs:{src:_(557),alt:"image-20210309113745228"}})]),t._v(" "),v("p",[t._v("但是这里为什么直接是转发到了 origin ，笔者就不清楚 "),v("code",[t._v("return ngx.exec(path)")]),t._v(" 这句代码的含义了，在这里它加了。 但是值的注意的是，后端这里增加了代理头 "),v("code",[t._v("x-***")]),t._v(" 的")]),t._v(" "),v("p",[t._v("单从浏览器的页面上很难看出代理做了哪些工作，因为代理的转发都在后台不可见，所以我把这个过程用 Wireshark 抓了一个包：")]),t._v(" "),v("p",[v("img",{attrs:{src:_(558),alt:"img"}})]),t._v(" "),v("p",[t._v("从抓包里就可以清晰地看出代理与客户端、源服务器的通信过程：")]),t._v(" "),v("ol",[v("li",[t._v("客户端 55061 先用三次握手连接到代理的 80 端口，然后发送 GET 请求；")]),t._v(" "),v("li",[t._v("代理不直接生产内容，所以就代表客户端，用 55063 端口连接到源服务器，也是三次握手；")]),t._v(" "),v("li",[t._v("代理成功连接源服务器后，发出了一个 HTTP/1.0 的 GET 请求；")]),t._v(" "),v("li",[t._v("因为 HTTP/1.0 默认是短连接，所以源服务器发送响应报文后立即用四次挥手关闭连接；")]),t._v(" "),v("li",[t._v("代理拿到响应报文后再发回给客户端，完成了一次代理服务。")])]),t._v(" "),v("p",[t._v("在这个实验中，你可以看到除了 "),v("code",[t._v("X-Forwarded-For")]),t._v(" 和 "),v("code",[t._v("X-Real-IP")]),t._v(" ，还出现了两个字段："),v("code",[t._v("X-Forwarded-Host")]),t._v(" 和 "),v("code",[t._v("X-Forwarded-Proto")]),t._v(" ，它们的作用与 "),v("code",[t._v("X-Real-IP")]),t._v(" 类似，只记录客户端的信息，分别是客户端请求的原始域名和原始协议名。")]),t._v(" "),v("h2",{attrs:{id:"代理协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代理协议"}},[t._v("#")]),t._v(" 代理协议")]),t._v(" "),v("p",[t._v("有了 "),v("code",[t._v("X-Forwarded-For")]),t._v(" 等头字段，源服务器就可以拿到准确的客户端信息了。但对于代理服务器来说它并不是一个最佳的解决方案。")]),t._v(" "),v("p",[t._v("因为通过 "),v("code",[t._v("X-Forwarded-For")]),t._v(" 操作代理信息 "),v("strong",[t._v("必须要解析 HTTP 报文头")]),t._v(" ，这对于代理来说成本比较高，原本只需要简单地转发消息就好，而现在却必须要费力解析数据再修改数据，"),v("strong",[t._v("会降低代理的转发性能")]),t._v(" 。")]),t._v(" "),v("p",[t._v("另一个问题是 "),v("code",[t._v("X-Forwarded-For")]),t._v(" 等头 "),v("strong",[t._v("必须要修改原始报文")]),t._v(" ，而有些情况下是不允许甚至不可能的（比如使用 "),v("strong",[t._v("HTTPS 通信被加密")]),t._v(" ）。")]),t._v(" "),v("p",[t._v("所以就出现了一个专门的 "),v("strong",[t._v("代理协议 （The PROXY protocol）")]),t._v(" ，它由知名的代理软件 HAProxy 所定义，也是一个 "),v("strong",[t._v("事实标准")]),t._v(" ，被广泛采用（注意并不是 RFC）。")]),t._v(" "),v("p",[t._v("代理协议有 v1 和 v2 两个版本，v1 和 HTTP 差不多，也是明文，而 v2 是二进制格式。今天只介绍比较好理解的 v1，它在 HTTP 报文前增加了一行 ASCII 码文本，相当于又多了一个头。")]),t._v(" "),v("p",[t._v("这一行文本其实非常简单，开头必须是 "),v("code",[t._v("PROXY")]),t._v(" 五个大写字母，然后是 "),v("code",[t._v("TCP4")]),t._v(" 或者 "),v("code",[t._v("TCP6")]),t._v(" ，表示客户端的 IP 地址类型，再后面是请求方地址、应答方地址、请求方端口号、应答方端口号，最后用一个回车换行（\\r\\n）结束。")]),t._v(" "),v("p",[t._v("例如下面的这个例子，在 GET 请求行前多出了 PROXY 信息行，客户端的真实 IP 地址是 "),v("code",[t._v("1.1.1.1")]),t._v(" ，端口号是 55555。")]),t._v(" "),v("div",{staticClass:"language-http line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-http"}},[v("code",[t._v("PROXY TCP4 1.1.1.1 2.2.2.2 55555 80\\r\\n\nGET / HTTP/1.1\\r\\n\n"),v("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Host:")]),t._v(" www.xxx.com\\r\\n\n\\r\\n\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br"),v("span",{staticClass:"line-number"},[t._v("2")]),v("br"),v("span",{staticClass:"line-number"},[t._v("3")]),v("br"),v("span",{staticClass:"line-number"},[t._v("4")]),v("br")])]),v("p",[t._v("服务器看到这样的报文，只要解析第一行就可以拿到客户端地址，不需要再去理会后面的 HTTP 数据，省了很多事情。")]),t._v(" "),v("p",[t._v("不过代理协议并不支持 "),v("code",[t._v("X-Forwarded-For")]),t._v(" 的链式地址形式，所以拿到客户端地址后再如何处理就需要代理服务器与后端自行约定。")]),t._v(" "),v("h2",{attrs:{id:"小结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),v("ol",[v("li",[t._v("HTTP 代理就是客户端和服务器通信链路中的一个中间环节，为两端提供 "),v("strong",[t._v("代理服务")]),t._v(" ；")]),t._v(" "),v("li",[t._v("代理处于中间层，为 HTTP 处理增加了更多的灵活性，可以实现负载均衡、安全防护、数据过滤等功能；")]),t._v(" "),v("li",[t._v("代理服务器需要使用字段 "),v("code",[t._v("Via")]),t._v(" 标记自己的身份，多个代理会形成一个列表；")]),t._v(" "),v("li",[t._v("如果想要知道客户端的真实 IP 地址，可以使用字段 "),v("code",[t._v("X-Forwarded-For")]),t._v(" 和 "),v("code",[t._v("X-Real-IP")]),t._v(" ；")]),t._v(" "),v("li",[t._v("专门的 "),v("strong",[t._v("代理协议")]),t._v(" 可以在不改动原始报文的情况下传递客户端的真实 IP。")])]),t._v(" "),v("h2",{attrs:{id:"课下作业"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#课下作业"}},[t._v("#")]),t._v(" 课下作业")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("你觉得代理有什么缺点？实际应用时如何避免？")]),t._v(" "),v("p",[t._v("代理的缺点是增加链路长度，会增加响应耗时，应尽量减少在代理商所做的的一些与业务无关的复杂耗时操作。")])]),t._v(" "),v("li",[v("p",[t._v("你知道多少反向代理中使用的负载均衡算法？它们有什么优缺点？")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("随机")])]),t._v(" "),v("li",[v("p",[t._v("轮询")])]),t._v(" "),v("li",[v("p",[t._v("哈希")])]),t._v(" "),v("li",[v("p",[t._v("最近最少使用")])]),t._v(" "),v("li",[v("p",[t._v("链接最少")])])])])]),t._v(" "),v("h2",{attrs:{id:"拓展阅读"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拓展阅读"}},[t._v("#")]),t._v(" 拓展阅读")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("现实生活中也有很多代理，例如房产代理、留学代理、保险代理、诉讼代理、可以对比理解下")])]),t._v(" "),v("li",[v("p",[t._v("知名的代理软件有 HAProxy、Squid、Varnish 等，而 Nginx 虽然是 Web 服务器，但也可以作为代理服务器，而且功能毫不逊色")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("Via")]),t._v(" 是 HTTP 协议里规定的标准头字段，但有的服务器返回的响应报文里会使用 "),v("code",[t._v("X-Via")]),t._v(" 含义是相同的")])]),t._v(" "),v("li",[v("p",[t._v("因为 HTTP 是明文传输，请求头是很容易被篡改，所以 "),v("code",[t._v("X-Forwarded-For")]),t._v(" 也不是完全可信")])]),t._v(" "),v("li",[v("p",[t._v("RFC7239定义了字段 "),v("code",[t._v("Forwarded")]),t._v("，它可以代替 "),v("code",[t._v("X-Forwarded-For")]),t._v("、"),v("code",[t._v("X-Forwarded-Host")]),t._v(" 等字段，但应用得不多")])]),t._v(" "),v("li",[v("p",[t._v("如何检测匿名代理？")]),t._v(" "),v("p",[t._v("如果代理比较善良，修改了字段 "),v("code",[t._v("X-Forwarded-For")]),t._v(" 和 "),v("code",[t._v("X-Real-IP")]),t._v("，我们还能看到，如果它不携带这些字段，我们也没有办法，因为它就是一个真实的客户端")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);